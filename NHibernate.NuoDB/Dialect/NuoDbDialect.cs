using NHibernate.Dialect.Function;
using NHibernate.SqlCommand;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NHibernate.Dialect
{
    public class NuoDbDialect : Dialect
    {
        public NuoDbDialect()
        {
            RegisterCharacterTypeMappings();
            RegisterNumericTypeMappings();
            RegisterDateTimeTypeMappings();
            RegisterLargeObjectTypeMappings();
            RegisterFunctions();
        }

        private void RegisterFunctions()
        {
            RegisterFunction("concat", new VarArgsSQLFunction(NHibernateUtil.String, "", " || ", ""));
            RegisterFunction("now", new NoArgSQLFunction("now", NHibernateUtil.DateTime));
            RegisterFunction("length", new StandardSQLFunction("char_length", NHibernateUtil.Int64));
            RegisterFunction("substring", new SQLFunctionTemplate(NHibernateUtil.String, "substr(?1, ?2, ?3)"));
        }

        private void RegisterLargeObjectTypeMappings()
        {
            RegisterColumnType(DbType.SByte, "BIT");
            RegisterColumnType(DbType.Binary, "BINARY VARYING(8000)");
        }

        private void RegisterDateTimeTypeMappings()
        {
            RegisterColumnType(DbType.Time, "TIMEONLY");
            RegisterColumnType(DbType.Date, "DATE");
            RegisterColumnType(DbType.DateTime, "DATE");            
        }

        private void RegisterNumericTypeMappings()
        {
            RegisterColumnType(DbType.Boolean, "BOOLEAN");
            RegisterColumnType(DbType.Byte, "SMALLINT");
            RegisterColumnType(DbType.Decimal, "DECIMAL(19,5)");
            RegisterColumnType(DbType.Decimal, 19, "DECIMAL($p, $s)");
            RegisterColumnType(DbType.Double, "DOUBLE PRECISION"); //synonym for FLOAT(53)
            RegisterColumnType(DbType.Int16, "SMALLINT");
            RegisterColumnType(DbType.Int32, "INTEGER");
            RegisterColumnType(DbType.Int64, "BIGINT");
            RegisterColumnType(DbType.Currency, "DECIMAL(16,4)");
            RegisterColumnType(DbType.Single, "REAL"); //synonym for FLOAT(24)
            RegisterColumnType(DbType.VarNumeric, "NUMERIC($p, $s)");
            RegisterColumnType(DbType.UInt16, "SMALLINT");
            RegisterColumnType(DbType.UInt32, "INTEGER");
            RegisterColumnType(DbType.UInt64, "BIGINT");
        }

        private void RegisterCharacterTypeMappings()
        {
            RegisterColumnType(DbType.AnsiStringFixedLength, "CHARACTER(255)");
            RegisterColumnType(DbType.AnsiStringFixedLength, 8000, "CHARACTER($l)");
            RegisterColumnType(DbType.AnsiString, "CHARACTER VARYING(255)");
            RegisterColumnType(DbType.AnsiString, 4000, "CHARACTER VARYING($1)");
            RegisterColumnType(DbType.AnsiString, 8000, "CLOB($1)");
            RegisterColumnType(DbType.String, "NATIONAL CHARACTER VARYING(255)");
            RegisterColumnType(DbType.String, 4000, "NATIONAL CHARACTER VARYING($1)");
            RegisterColumnType(DbType.String, 8000, "NCLOB($1)");
        }

        public override string AddColumnString
        {
            get
            {
                return "add column";
            }
        }

        public override bool SupportsIdentityColumns
        {
            get { return true; }
        }

        public override bool SupportsSequences
        {
            get
            {
                return true;
            }
        }

        public override bool QualifyIndexName
        {
            get
            {
                return false;
            }
        }

        public override InsertGeneratedIdentifierRetrievalMethod InsertGeneratedIdentifierRetrievalMethod
        {
            get
            {
                return InsertGeneratedIdentifierRetrievalMethod.ReturnValueParameter;
            }
        }

        public override string IdentityColumnString
        {
            get
            {
                return "generated by default as identity not null";
            }
        }

        public override bool SupportsInsertSelectIdentity
        {
            get
            {
                return true;
            }
        }

        public override string GetIdentitySelectString(string identityColumn, string tableName, DbType type)
        {
            return "";
        }

        public override string CurrentTimestampSQLFunctionName
        {
            get
            {
                return "NOW";
            }
        }

        public override string CurrentTimestampSelectString
        {
            get
            {
                return "SELECT NOW()";
            }
        }

        public override bool SupportsCurrentTimestampSelection
        {
            get
            {
                return true;
            }
        }                

        public override bool SupportsLimit
        {
            get
            {
                return true;
            }
        }

        public override bool SupportsLimitOffset
        {
            get
            {
                return true;
            }
        }

        public override bool SupportsVariableLimit
        {
            get
            {
                return false;
            }
        }

        public override bool DropConstraints
        {
            get
            {
                return false;
            }
        }

        public override string DropForeignKeyString
        {
            get
            {
                return " drop constraint foreign ";
            }
        }

        public override string SelectGUIDString
        {
            get
            {
                return "select uuid()";
            }
        }

        public override bool SupportsIfExistsAfterTableName
        {
            get
            {
                return true;
            }
        }

        public override bool SupportsIfExistsBeforeTableName
        {
            get
            {
                return false;
            }
        }

        public override bool SupportsCascadeDelete
        {
            get
            {
                return false;
            }
        }

        public override bool SupportsTemporaryTables
        {
            get
            {
                return false;
            }
        }

        public override bool? PerformTemporaryTableDDLInIsolation()
        {
            return false;
        }
        
        public override int RegisterResultSetOutParameter(System.Data.Common.DbCommand statement, int position)
        {
            return position;
        }

        public override bool SupportsRowValueConstructorSyntax
        {
            get
            {
                return true;
            }
        }

        public override string ForUpdateString
        {
            get
            {
                return " for update";
            }
        }

        public override bool SupportsEmptyInList
        {
            get
            {
                return false;
            }
        }

        public override bool AreStringComparisonsCaseInsensitive
        {
            get
            {
                return true;
            }
        }

        public override bool SupportsLobValueChangePropogation
        {
            get
            {
                return false;
            }
        }

        public override bool SupportsSubqueryOnMutatingTable
        {
            get
            {
                return false;
            }
        }

        public override SqlCommand.SqlString GetLimitString(SqlCommand.SqlString queryString, SqlCommand.SqlString offset, SqlCommand.SqlString limit)
        {
            var pagingBuilder = new SqlStringBuilder(queryString);

            if (offset != null)
            {
                pagingBuilder.Add(" offset ").Add(offset);
            }

            pagingBuilder.Add(" fetch ");
                     
            if (limit != null)
                pagingBuilder.Add(limit);
            else
                pagingBuilder.Add(int.MaxValue.ToString());


            return pagingBuilder.ToSqlString();
        }


        public override string GetSequenceNextValString(string sequenceName)
        {
            return string.Format("select cast(next value for {0} as integer) from dual", sequenceName);
        }

        public override string GetCreateSequenceString(string sequenceName)
        {
            return string.Format("create sequence {0}", sequenceName);
        }

        public override string GetDropSequenceString(string sequenceName)
        {
            return string.Format("drop sequence {0}", sequenceName);
        }
    }

}
